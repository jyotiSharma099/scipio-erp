# Controls subscriptions to entity indexing done via scheduleEntityIndexing service

entity.indexer.debug=false
entity.indexer.log.stats.interval=1000
entity.indexer.log.level=info

# EntityIndexer defaults (all entities)
entity.indexer.default.factoryClass=com.ilscipio.scipio.solr.EntityIndexer$Factory
# time to wait for global queue to fill up (1 entity = 1 indexer = 1 queue)
entity.indexer.default.flushTime=3000
# max run time for a processing run loop for ECAs, after which the running thread stops making document reads and quits
entity.indexer.default.maxRunTime=10000
# buffer size for reading entities and dispatching
# NOTE: see also googleshopping.properties#google.shopping.index.doc.buffer.size
entity.indexer.default.bufSize=1000
# very short time to sleep, must be less than flushTime
entity.indexer.default.sleepTime=500

# ProductIndexer settings
entity.indexer.Product.factoryClass=com.ilscipio.scipio.solr.ProductIndexer$Factory
entity.indexer.Product.entityName=Product
# The standard Solr Product consumer
# NOTE: By default this consume runs in sync mode, not recommended in other cases. This can be switched to async
# for higher concurrency if the server has enough available threads most of the time.
# NOTE: Using sync you should set a very high sequenceNum otherwise async consumers will be highly delayed
# The default sequenceNum for Product indexer when async should be 20 or lower than the others.
# FIXME: currently at least one consumer has to be set "sync" (here) otherwise the document processing thread
# (started from runEntityIndexing) interferes with the job manager priorities.
entity.indexer.Product.consumer.solr.sequenceNum=1000
entity.indexer.Product.consumer.solr.topics=solr
entity.indexer.Product.consumer.solr.service=commitToSolr
entity.indexer.Product.consumer.solr.mode=sync
entity.indexer.Product.consumer.solr.persist=
entity.indexer.Product.consumer.solr.priority=
# Values: ignore (default), requeue-all (requeue products for all consumers - e.g. solr and google),
# requeue-topic (requeue products for current consumer - solr or google)
entity.indexer.Product.consumer.solr.onError=ignore
