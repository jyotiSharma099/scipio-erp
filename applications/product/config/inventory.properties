# General inventory configuration (SCIPIO)

# In setLastInventoryCount service, recountEvery determines number of ProductFacility.lastInventoryCount record
# update calls to run on entity cache between non-entity-cached updates (useEntityCache), with optional forced
# non-cached updates when inventory levels drops.
inventory.cache.recountThresholdAtp=0
inventory.cache.recountThresholdQoh=0
inventory.cache.recountEvery=0

# If item true, calls to setLastInventoryCount with an inventoryItemId automatically create missing ProductFacility records.
# If product true, the same happens with setProductLastInventoryCount updating ProductFacility cache for all product's inventory items (set); adds small overhead lookup but ensures correctness.
inventory.cache.autoProductFacility.item=true
inventory.cache.autoProductFacility.product=true

# Experimental/debug: when true setLastInventoryCount calls with single InventoryItem only updates the ProductFacility for InventoryItem.facilityId, not all
# This setting is logical but side-effects are unknown so currently defaults false (legacy behavior).
inventory.cache.updateSingleFacility=false

# updateDirtyLastInventoryCounts: threshold for ProductFacility.lastInvStamp (SCIPIO)
# To enable this service, uncomment UPINVRECOUNTS JobSandbox in ProductScheduledServices.xml.
inventory.cache.updateDirtyLastInventoryCounts.expiryTime=5000
